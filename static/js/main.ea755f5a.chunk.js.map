{"version":3,"sources":["components/TaskCard.js","components/Alert.js","reducer.js","App.js","index.js"],"names":["TaskCard","title","description","status","removeAction","doubleClickAction","toggleAction","className","isComplete","toggle","isOpen","onDoubleClick","onClick","style","textDecoration","Alert","closeAlert","alertContent","useEffect","timer","setTimeout","clearTimeout","reducer","state","action","type","newItems","taskItems","payload","isAlertOpen","loadTitle","loadStatus","LOCAL_STORAGE_KEY","defaultState","isModalOpen","modalContent","TodoList","useReducer","dispatch","TaskTitleRef","useRef","TaskDescRef","storedData","JSON","parse","localStorage","getItem","setItem","stringify","onSubmit","e","preventDefault","current","value","desc","newItem","id","Date","getTime","toString","ref","placeholder","length","map","item","filter","handleRemoveTask","find","handleDoubleClick","handleToggleClick","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.ea755f5a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TaskCard = ({ title, description, status, removeAction, doubleClickAction, toggleAction }) => {\r\n  return (\r\n    <div>\r\n      <div className={`task-card p-2 my-2 ${status.isComplete ? \"complete\" : \"pending\"} `} toggle={`${status.isOpen ? \"open\" : \"close\"}`} onDoubleClick={doubleClickAction}>\r\n        <button className=\"toggle-btn\" onClick={toggleAction}>\r\n          &#8595;\r\n        </button>\r\n        <div className=\"title\">{title}</div>\r\n        <div className=\"description\">- {description || <span style={{ textDecoration: \"line-through\" }}>No Description</span>}</div>\r\n        <button className=\"remove-btn\" onClick={removeAction}>\r\n          &times;\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCard;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst Alert = ({ closeAlert, alertContent }) => {\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      closeAlert();\r\n    }, 20000);\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  });\r\n  return (\r\n    <>\r\n      <div className=\"alert-container\">\r\n        <span>{alertContent}</span>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","export const reducer = (state, action) => {\r\n  if (action.type === \"ADD_TASK\") {\r\n    const newItems = [...state.taskItems, action.payload];\r\n    return { ...state, taskItems: newItems, isAlertOpen: true, alertContent: \"New task added!\" };\r\n  }\r\n  if (action.type === \"LOAD_TASK\") {\r\n    return { taskItems: action.payload };\r\n  }\r\n  if (action.type === \"UPDATE_TASK\") {\r\n    return { ...state, taskItems: action.payload, isAlertOpen: true, alertContent: `${action.loadTitle} change to ${action.loadStatus ? \"completed!\" : \"pending!\"}` };\r\n  }\r\n  if (action.type === \"REMOVE_TASK\") {\r\n    return { ...state, taskItems: action.payload, isAlertOpen: true, alertContent: `${action.loadTitle} is removed!` };\r\n  }\r\n  if (action.type === \"CLEAR_TASK\") {\r\n    return { ...state, taskItems: [], isAlertOpen: true, alertContent: \"Task Cleared!\" };\r\n  }\r\n  if (action.type === \"TOGGLE_TASK\") {\r\n    return { ...state, taskItems: action.payload };\r\n  }\r\n  if (action.type === \"CLOSE_ALERT\") {\r\n    return { ...state, isAlertOpen: false };\r\n  }\r\n  if (action.type === \"EMPTY_TASK\") {\r\n    return { ...state, isAlertOpen: true, alertContent: \"Task field is empty!\" };\r\n  }\r\n  return state;\r\n};\r\n","import React, { useState, useEffect, useRef, useReducer } from \"react\";\n\n//Component\nimport TaskCard from \"./components/TaskCard\";\nimport Alert from \"./components/Alert\";\n\nimport { reducer } from \"./reducer\";\n\nconst LOCAL_STORAGE_KEY = \"TASK_TRACKER\";\n\nconst defaultState = {\n  taskItems: [],\n  isModalOpen: false,\n  modalContent: \"\",\n};\n\nconst TodoList = () => {\n  const [state, dispatch] = useReducer(reducer, defaultState);\n  const TaskTitleRef = useRef();\n  const TaskDescRef = useRef();\n\n  // retrieve stored data in local storage\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedData) {\n      dispatch({ type: \"LOAD_TASK\", payload: storedData });\n    }\n  }, []);\n\n  // useEffect store to local storage\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state.taskItems));\n  }, [state.taskItems]);\n\n  const handleSubmitTask = (e) => {\n    e.preventDefault();\n    const title = TaskTitleRef.current.value;\n    const desc = TaskDescRef.current.value;\n    if (title) {\n      const newItem = { id: new Date().getTime().toString(), title: title, description: desc, isComplete: false, isOpen: false };\n      dispatch({ type: \"ADD_TASK\", payload: newItem });\n    } else {\n      dispatch({ type: \"EMPTY_TASK\" });\n    }\n    TaskTitleRef.current.value = \"\";\n    TaskDescRef.current.value = \"\";\n  };\n\n  const handleRemoveTask = (id, title) => {\n    const newItems = state.taskItems.filter((item) => item.id !== id);\n    dispatch({ type: \"REMOVE_TASK\", payload: newItems, loadTitle: title });\n  };\n\n  const handleToggleClick = (id) => {\n    const newItems = [...state.taskItems];\n    const item = newItems.find((item) => {\n      if (item.id === id) {\n        item.isOpen = !item.isOpen;\n      } else {\n        item.isOpen = false;\n      }\n    });\n    dispatch({ type: \"TOGGLE_TASK\", payload: newItems });\n  };\n\n  const handleDoubleClick = (id) => {\n    const newItems = [...state.taskItems];\n    const item = newItems.find((item) => item.id === id);\n    item.isComplete = !item.isComplete;\n    dispatch({ type: \"UPDATE_TASK\", payload: newItems, loadTitle: item.title, loadStatus: item.isComplete });\n  };\n\n  const closeAlert = () => {\n    dispatch({ type: \"CLOSE_ALERT\" });\n  };\n\n  return (\n    <>\n      {state.isAlertOpen && <Alert closeAlert={closeAlert} alertContent={state.alertContent} />}\n      <div className=\"taskTracker\">\n        <div className=\"container border border-dark py-4 shadow bg-light\">\n          <h1 className=\"text-center\">Task Tracker</h1>\n          <form onSubmit={handleSubmitTask}>\n            <div className=\"input-group mb-2\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">\n                  <b>Task</b>\n                </span>\n              </div>\n              <input type=\"text\" className=\"form-control py-1\" ref={TaskTitleRef}></input>\n            </div>\n            <div className=\"input-group mb-2\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text py-3\">\n                  <b>Description</b>\n                </span>\n              </div>\n              <textarea className=\"form-control textarea py-1\" ref={TaskDescRef} placeholder=\"\"></textarea>\n            </div>\n            <button type=\"submit\" className=\"add-task-btn\">\n              Add Task\n            </button>\n          </form>\n          <hr></hr>\n\n          <div className=\"legend\">\n            <div className=\"flex-container\">\n              <label className=\"label\">\n                <b>Status : </b>\n              </label>\n              <div className=\"flex-item\">\n                <div className=\"box-pending\"></div>\n                <span>Pending</span>\n              </div>\n              <div className=\"flex-item\">\n                <div className=\"box-success\"></div>\n                <span>Completed</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <small>\n              <i>Note: Use double tap/click the item to update the status and click the arrow to toggle.</i>\n            </small>\n          </div>\n          {state.taskItems != null && state.taskItems.length > 0 ? (\n            state.taskItems.map((item) => {\n              const { id, title, description } = item;\n              return (\n                <TaskCard\n                  key={id}\n                  title={title}\n                  description={description}\n                  status={item}\n                  removeAction={() => handleRemoveTask(id, title)}\n                  doubleClickAction={() => {\n                    handleDoubleClick(id, title);\n                  }}\n                  toggleAction={() => {\n                    handleToggleClick(id);\n                  }}\n                />\n              );\n            })\n          ) : (\n            <p className=\"text-center mt-3 \">No task available!</p>\n          )}\n          {state.taskItems != null && state.taskItems.length > 0 ? (\n            <button type=\"submit\" className=\"clear-task-btn\" onClick={() => dispatch({ type: \"CLEAR_TASK\" })}>\n              Clear Task\n            </button>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n//Style CSS\nimport \"./index.scss\";\n\n// Bootstrap\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}